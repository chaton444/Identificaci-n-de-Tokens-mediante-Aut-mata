/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication18;

import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author chato
 */
public class Menu extends javax.swing.JFrame {

    NumeroLinea numeroLinea;
    NumeroLinea numeroLinea2;
    File currentFile;
    String[] lines;
    // Definición de variables globales
    String contadorTexto = "";
    int contIdentificador = 0;
    int contError = 0;
    int contAritmetico = 0;
    int contIncremento = 0;
    int contDecremento = 0;
    int contEntero = 0;
    int contFloat = 0;
    int contCadena = 0;
    int contReservada = 0;
    int contComentarioLinea = 0;
    int contLlaves = 0;
    int contComentarioLargo = 0;
    int contParentesis = 0;
    int contLogico = 0;
    int auxLLavesA = 0;
    int auxLLavesB = 0;
    int auxParentesisA = 0;
    int auxParentesisB = 0;
    int auxComentarioA = 0;
    int auxComentarioB = 0;
    int contAsignacion = 0;
    int contRelacional = 0;
    boolean Aceptacion = false;
    int auxIncremento = 0;
    int auxDecremento = 0;
    int auxDiagonal = 0;
    boolean banderaEntero = false;
    boolean banderaFloat = false;
    boolean banderaAuxAritmetico = false;
    boolean banderaIdentificador = false;
    boolean banderaCadena = false;
    boolean banderaReservada = false;
    boolean banderaError = false;
    boolean banderaComentarioLinea = false;
    boolean banderaAuxDiagonal = false;
    boolean banderaAuxSuma = false;
    boolean banderaAuxResta = false;
    boolean banderaAuxPorcentaje = false;
    boolean banderaAuxAsterisco = false;
    boolean banderaIncremento = false;
    boolean banderaDecremento = false;
    boolean banderaAuxAsignacion = false;
    boolean banderaRelacional = false;
    boolean banderaAuxMayor = false;
    boolean banderaAuxMenor = false;
    boolean banderaAuxNegacion = false;
    boolean banderaLogico = false;
    boolean banderaAuxAnd = false;
    boolean banderaAuxOr = false;

    /**
     * Creates new form Menu
     */
    enum State {
        START,
        IF,
        MAIN,
        ELSE,
        SWITCH,
        CASE,
        DEFAULT,
        FOR,
        DO,
        WHILE,
        BREAK,
        INT,
        STRING,
        DOUBLE,
        CHAR,
        PRINT,
        IDENTIFICADOR,
        OPERADOR_RELACIONAL,
        OPERADOR_LOGICO,
        OPERADOR_ARITMETICO,
        INCREMENTO,
        DECREMENTO,
        ASIGNACION,
        ENTERO,
        DECIMAL,
        STRING_LITERAL,
        COMMENT,
        LINEA_COMENTARAIO,
        PARENTESIS,
        BRACE,
        ERROR
    }
    private static final Map<String, State> Palabras_Reservadas = new HashMap<>();

    static {
        Palabras_Reservadas.put("if", State.IF);
        Palabras_Reservadas.put("main", State.MAIN);
        Palabras_Reservadas.put("else", State.ELSE);
        Palabras_Reservadas.put("switch", State.SWITCH);
        Palabras_Reservadas.put("case", State.CASE);
        Palabras_Reservadas.put("default", State.DEFAULT);
        Palabras_Reservadas.put("for", State.FOR);
        Palabras_Reservadas.put("do", State.DO);
        Palabras_Reservadas.put("while", State.WHILE);
        Palabras_Reservadas.put("break", State.BREAK);
        Palabras_Reservadas.put("int", State.INT);
        Palabras_Reservadas.put("String", State.STRING);
        Palabras_Reservadas.put("double", State.DOUBLE);
        Palabras_Reservadas.put("char", State.CHAR);
        Palabras_Reservadas.put("print", State.PRINT);
    }
    // Obtener el texto del área de texto y dividirlo por saltos de línea

    public Menu() {

        initComponents();
        numeroLinea2 = new NumeroLinea(txtArea2);
        numeroLinea = new NumeroLinea(txtArea);
        scroll.setRowHeaderView(numeroLinea);
        scroll2.setRowHeaderView(numeroLinea2);
        this.lines = null;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        scroll2 = new javax.swing.JScrollPane();
        txtArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Guardar Archivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, 20));

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Cargar Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, 20));

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Run");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 50, 20));

        scroll.setBackground(new java.awt.Color(0, 0, 0));
        scroll.setForeground(new java.awt.Color(255, 255, 255));

        txtArea.setBackground(new java.awt.Color(250, 249, 243));
        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtArea.setRows(5);
        scroll.setViewportView(txtArea);

        jPanel1.add(scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 390, 430));

        txtArea2.setBackground(new java.awt.Color(250, 249, 243));
        txtArea2.setColumns(20);
        txtArea2.setRows(5);
        scroll2.setViewportView(txtArea2);

        jPanel1.add(scroll2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 250, 430));

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel3.setText("Aut0");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 110, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication18/f4.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 550));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile(); // Almacenar el archivo actual
            try (BufferedReader br = new BufferedReader(new FileReader(currentFile))) {
                txtArea.read(br, null);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (currentFile != null) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(currentFile))) {
                txtArea.write(bw);
                JOptionPane.showMessageDialog(null, "¡Se Guardo Correctamente!", "Alerta", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            JFileChooser fileChooser = new JFileChooser();
            int returnValue = fileChooser.showSaveDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                currentFile = fileChooser.getSelectedFile();
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(currentFile))) {
                    txtArea.write(bw);
                    JOptionPane.showMessageDialog(null, "¡Se Guardo Correctamente!", "Alerta", JOptionPane.INFORMATION_MESSAGE);

                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Restaurar();
        String texto = txtArea.getText();
        analizarTexto(texto);

    }//GEN-LAST:event_jButton3ActionPerformed

    void analizarTexto(String texto) {
        List<String> lineas = separarLineas(texto);
        for (String linea : lineas) {
            List<String> palabras = separarPalabras(linea);
            for (String palabra : palabras) {
                q0(palabra);
            }
        }

        mostrarResultados();
    }

    List<String> separarLineas(String texto) {
        List<String> lineas = new ArrayList<>();
        StringBuilder lineaActual = new StringBuilder();
        for (int i = 0; i < texto.length(); i++) {
            char caracter = texto.charAt(i);
            if (caracter == '\n' || caracter == ' ' || caracter == '\t') {
                lineas.add(lineaActual.toString());
                lineaActual = new StringBuilder();
            } else {
                lineaActual.append(caracter);
            }
        }
        if (lineaActual.length() > 0) {
            lineas.add(lineaActual.toString());
        }
        return lineas;
    }

    List<String> separarPalabras(String linea) {
        List<String> palabras = new ArrayList<>();
        StringBuilder palabraActual = new StringBuilder();
        for (int i = 0; i < linea.length(); i++) {
            char caracter = linea.charAt(i);
            if (caracter == ' ' || caracter == '\t' || caracter == '\n') {
                if (palabraActual.length() > 0) {
                    palabras.add(palabraActual.toString());
                    palabraActual = new StringBuilder();
                }
            } else {
                palabraActual.append(caracter);
            }
        }
        if (palabraActual.length() > 0) {
            palabras.add(palabraActual.toString());
        }
        return palabras;
    }

    void q0(String palabra) {
        char letra = palabra.charAt(0);

        //revisa si la primera letra de la palabra es un entero
        if (Character.isDigit(letra)) {

            q6(palabra.substring(1, palabra.length())); // Números

        }
        if (Character.isLetter(letra)) {
            q1(palabra); // Alfabeto
        }

        switch (letra) {

            case '+':
                q3(palabra); // Operador de suma
                break;
            case '*':
                q5(palabra); // Operadores de multiplicación y módulo
                break;
            case '%':
                q5(palabra); // Operadores de multiplicación y módulo
                break;
            case '-':
                q7(palabra); // Operador de resta
                break;
            case '/':
                q12(palabra); // Operador de división
                break;
            case '=':
                q18(palabra); // Operador de asignación
                break;
            case '<':
                q20(palabra); // Operadores relacionales
                break;
            case '>':
                q20(palabra); // Operadores relacionales
                break;
            case '!':
                q21(palabra); // Operador lógico de negación
                break;
            case '"':
                q29(palabra); // Comillas (no aceptadas)
                break;
            case '(':
                q28(palabra); // Paréntesis
                break;
            case ')':
                q28(palabra); // Paréntesis
                break;
            case '{':
                q26(palabra); // Llaves
                break;
            case '}':
                q26(palabra); // Llaves
                break;
            case '|':
                q25(palabra); // Números
                break;
            case '&':
                q23(palabra); // Operadores lógicos (no aceptados)
                break;

        }
    }

    void q1(String palabra) {
        int longitudPalabra = palabra.length();
        boolean aceptacion = true;

        for (int i = 0; i < longitudPalabra; i++) {
            char letra = palabra.charAt(i);
            if (!((letra >= 'a' && letra <= 'z') || (letra >= 'A' && letra <= 'Z') || letra == '_' || Character.isDigit(letra))) {
                aceptacion = false; // Si encontramos un carácter no válido, establecemos la aceptación en false
                break; // Salimos del bucle ya que ya sabemos que la palabra no es válida
            }
        }

        if (!aceptacion) {
            qError();
        } else if (banderaReservada = Palabras_Reservadas.containsKey(palabra)) {
            contReservada++;
        } else {
            contIdentificador++;
        }
    }

    void q3(String palabra) {
        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contAritmetico++;
        } else if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(0);

            if (primerCaracter == '+') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)
                q4(palabra.substring(0, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        }
    }

    void q4(String palabra) {
        int longitudPalabra = palabra.length();

        // Verificar si la palabra tiene exactamente 2 caracteres
        if (longitudPalabra == 2) {
            char letra = palabra.charAt(1);
            if (letra == '+') {
                contIncremento++; // Incrementar contador de operadores aritméticos
            } else {
                qError(); // Llamar al estado de error
            }
        } else {
            qError(); // Llamar al estado de error si la palabra no tiene exactamente 2 caracteres
        }
    }

    void q5(String palabra) {

        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contAritmetico++;
        } else if (longitudPalabra > 1) {
            qError();
        }
    }

    void q6(String palabra) {
        boolean aceptacion = true; // Inicializamos aceptacion como true

        for (int i = 0; i < palabra.length(); i++) {
            char letra = palabra.charAt(i);

            if (Character.isDigit(letra)) {
                // Si el carácter es un dígito, continuamos verificando
                continue;
            } else if (letra == '.') {
                if (palabra.length() > i + 1) {

                    // Si encontramos un punto, llamamos al método q8 con la parte de la cadena después del punto
                    q8(palabra.substring(i + 1));
                    return; // Terminamos el método aquí ya que procesamos la parte después del punto
                }

            } else {
                // Si encontramos un carácter que no es un dígito ni un punto, establecemos aceptacion en false
                aceptacion = false;
                break; // Salimos del bucle ya que no necesitamos seguir verificando
            }
        }

        if (aceptacion) {
            // Si aceptacion es true después de revisar toda la palabra, incrementamos contEntero
            contEntero++;
        } else {
            // Si encontramos un carácter que no es un dígito ni un punto, llamamos al estado de error
            qError();
        }
    }

    void q7(String palabra) {
        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contAritmetico++;
        } else if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(1);
            char segundo = palabra.charAt(1);
            if (primerCaracter == '-') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)
                q11(palabra.substring(1, palabra.length()));
            } else if (Character.isDigit(segundo)) {
                q6(palabra.substring(1, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        }
    }

    void q8(String palabra) {

        char letra = palabra.charAt(0);
        if (Character.isDigit(letra)) {
            q9(palabra.substring(0, palabra.length()));

        } else {
            qError();
        }

    }

    void q9(String palabra) {

        int longitudPalabra = palabra.length();
        boolean aceptacion = false;

        for (int i = 0; i < longitudPalabra; i++) {
            char letra = palabra.charAt(i);
            if (Character.isDigit(letra)) {
                aceptacion = true;

            } else if (!Character.isDigit(letra)) {
                aceptacion = false;

            }

        }
        if (!aceptacion) {
            qError();
        } else {
            contFloat++;

        }
    }

    void q11(String palabra) {
        int longitudPalabra = palabra.length();

        // Verificar si la palabra tiene exactamente 2 caracteres
        if (longitudPalabra == 1) {
            char letra = palabra.charAt(0);
            if (letra == '-') {
                contDecremento++; // Incrementar contador de operadores aritméticos
            } else {
                qError(); // Llamar al estado de error
            }
        } else {
            qError(); // Llamar al estado de error si la palabra no tiene exactamente 2 caracteres
        }

    }

    void q12(String palabra) {

        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contAritmetico++;
        } else if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(1);
            char segundo = palabra.charAt(1);
            if (primerCaracter == '/') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)
                q14(palabra.substring(1, palabra.length()));
            } else if (primerCaracter == '*') {
                System.out.println("p1");
                q13(palabra.substring(1, palabra.length()));

            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        }
    }

    void q13(String palabra) {
         System.out.println("p2");
    for (int i = 0; i < palabra.length(); i++) {
        char letra = palabra.charAt(i);
        if (letra == '*') {
            if (i + 1 < palabra.length() && palabra.charAt(i + 1) == '/') {
                // Si encontramos '*/', llamamos al método q17 para finalizar el comentario
                q17(palabra.substring(i + 2));
                return; // Terminamos el método aquí ya que procesamos la parte después del '*/'
            }
        }
    }
    qError();

    }

    void q14(String palabra) {

        contComentarioLinea++;
    }

    void q15(String palabra) {
        System.out.println("p3");
    for (int i = 0; i < palabra.length(); i++) {
        char letra = palabra.charAt(i);
        if (letra == '*') {
            if (i + 1 < palabra.length() && palabra.charAt(i + 1) == '/') {
                // Si encontramos '*/', llamamos al método q17 para finalizar el comentario
                q17(palabra.substring(i + 2));
                return; // Terminamos el método aquí ya que procesamos la parte después del '*/'
            }
        }
    }
    qError();
    }

    void q17(String palabra) {
         System.out.println("p4");
    contComentarioLargo++;
    // Si hay caracteres restantes después de '*/', revisamos esos caracteres adicionales
    if (!palabra.isEmpty()) {
        analizarTexto(palabra); // Volvemos a analizar el texto restante después de '*/'
    }
    }

    void q18(String palabra) {

        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contAsignacion++;
        } else if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(0);

            if (primerCaracter == '=') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)
                System.out.println("p1");
                q19(palabra.substring(0, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        }
    }

    void q19(String palabra) {
        System.out.println("p2");
        int longitudPalabra = palabra.length();

        // Verificar si la palabra tiene exactamente 2 caracteres
        if (longitudPalabra == 2) {
            char letra = palabra.charAt(1);
            if (letra == '=') {
                contRelacional++; // Incrementar contador de operadores aritméticos
            } else {
                qError(); // Llamar al estado de error
            }
        } else {
            qError(); // Llamar al estado de error si la palabra no tiene exactamente 2 caracteres
        }
    }

    void q20(String palabra) {

        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contRelacional++;
        } else if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(1);

            if (primerCaracter == '=') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)
                System.out.println("p1");
                q19(palabra.substring(0, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        }
    }

    void q21(String palabra) {

        int longitudPalabra = palabra.length();
        if (longitudPalabra == 1) {
            // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
            contLogico++;
        } else if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(1);

            if (primerCaracter == '=') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)
                System.out.println("p1");
                q19(palabra.substring(0, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        } else {
            qError();
        }
    }

    void q23(String palabra) {

        int longitudPalabra = palabra.length();
        if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(1);

            if (primerCaracter == '&') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)

                q24(palabra.substring(0, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        } else {
            qError();
        }
    }

    void q24(String palabra) {

        int longitudPalabra = palabra.length();

        // Verificar si la palabra tiene exactamente 2 caracteres
        if (longitudPalabra == 2) {
            char letra = palabra.charAt(1);
            if (letra == '&' || letra == '|') {
                contLogico++; // Incrementar contador de operadores aritméticos
            } else {
                qError(); // Llamar al estado de error
            }
        } else {
            qError(); // Llamar al estado de error si la palabra no tiene exactamente 2 caracteres
        }
    }

    void q25(String palabra) {

        int longitudPalabra = palabra.length();
        if (longitudPalabra > 1) {
            // Si la palabra tiene más de un símbolo
            char primerCaracter = palabra.charAt(1);

            if (primerCaracter == '|') {
                // Si el primer símbolo es un operador de suma, transicionamos al siguiente estado (q4 en este caso)

                q24(palabra.substring(0, palabra.length()));
            } else {
                // Si no, consideramos la palabra como un error
                qError();
            }
        } else {
            qError();
        }
    }

    void q26(String palabra) {

        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            contLlaves++;
        } else {
            qError();
        }
    }

    void q28(String palabra) {

        int longitudPalabra = palabra.length();

        if (longitudPalabra == 1) {
            contParentesis++;
        } else {
            qError();
        }
    }

    void q29(String palabra) {
        int longitudPalabra = palabra.length();
        boolean aceptacion = false;

        for (int i = 0; i < longitudPalabra; i++) {
            char letra = palabra.charAt(i);
            if (longitudPalabra > 1) {
                if (i == longitudPalabra - 1) {

                    q30(palabra.substring(i, palabra.length()));

                }

            } else {
                qError();
            }

        }

    }

    void q30(String palabra) {
        int longitudPalabra = palabra.length();
        char primerCaracter = palabra.charAt(0);
        if (longitudPalabra == 1) {
            if (primerCaracter == '"') {
                // Si la palabra tiene longitud 1, incrementamos el contador de operadores aritméticos
                contCadena++;
            } else {
                qError();
            }

        }
    }

    void qError() {
        contError++;
    }

    void mostrarResultados() {

        contadorTexto = "Palabras Reservadas: " + contReservada + "\n"
                + "Identificadores: " + contIdentificador + "\n"
                + "Operador Relacional: " + contRelacional + "\n"
                + "Operador Logicos: " + contLogico + "\n"
                + "Operadores Aritméticos: " + contAritmetico + "\n"
                + "Asignacion: " + contAsignacion + "\n"
                + "Numeros Enteros: " + contEntero + "\n"
                + "Numeros Decimales: " + contFloat + "\n"
                + "Incremento: " + contIncremento + "\n"
                + "Decremento: " + contDecremento + "\n"
                + "Cadena de Caracteres: " + contCadena + "\n"
                + "Comentario: " + contComentarioLargo + "\n"
                + "Comentario en linea: " + contComentarioLinea + "\n"
                + "Parentesis: " + contParentesis + "\n"
                + "LLaves: " + contLlaves + "\n"
                + "\nErrores: " + contError + "\n";
        txtArea2.setText(contadorTexto);
    }

    public void Restaurar() {

        contIdentificador = 0;
        contError = 0;
        contAritmetico = 0;
        contIncremento = 0;
        contDecremento = 0;
        contEntero = 0;
        contFloat = 0;
        contCadena = 0;
        contReservada = 0;
        contComentarioLinea = 0;
        contLlaves = 0;
        contComentarioLargo = 0;
        contParentesis = 0;
        contLogico = 0;
        auxLLavesA = 0;
        auxLLavesB = 0;
        auxParentesisA = 0;
        auxParentesisB = 0;
        auxComentarioA = 0;
        auxComentarioB = 0;
        contAsignacion = 0;
        contRelacional = 0;
        Aceptacion = false;
        auxIncremento = 0;
        auxDecremento = 0;
        auxDiagonal = 0;
        banderaEntero = false;
        banderaFloat = false;
        banderaAuxAritmetico = false;
        banderaIdentificador = false;
        banderaCadena = false;
        banderaReservada = false;
        banderaError = false;
        banderaComentarioLinea = false;
        banderaAuxDiagonal = false;
        banderaAuxSuma = false;
        banderaAuxResta = false;
        banderaAuxPorcentaje = false;
        banderaAuxAsterisco = false;
        banderaIncremento = false;
        banderaDecremento = false;
        banderaAuxAsignacion = false;
        banderaRelacional = false;
        banderaAuxMayor = false;
        banderaAuxMenor = false;
        banderaAuxNegacion = false;
        banderaLogico = false;
        banderaAuxAnd = false;
        banderaAuxOr = false;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Menu().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextArea txtArea2;
    // End of variables declaration//GEN-END:variables
}
